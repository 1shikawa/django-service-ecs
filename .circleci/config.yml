#version: 2.1
#orbs:
#  aws-cli: circleci/aws-cli@0.1.4
#  aws-ecs: circleci/aws-ecs@0.0.3
#jobs:
#  build:
#    docker:
#      - image: circleci/python:3.7
#    steps:
#      - checkout
#      - setup_remote_docker
#      - run:
#          name: Make the executable
#          command: |
#            go build -o demo-app src/main.go
#      - run:
#          name: Setup common environment variables
#          command: |
#            echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
#            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
#      - run:
#          name: Build image
#          command: |
#            docker build -t $FULL_IMAGE_NAME ./web
#      - run:
#          name: Test image
#          command: |
#            docker run -d -p 8000:8000 --name built-image $FULL_IMAGE_NAME
#            sleep 10
#            docker run --network container:built-image appropriate/curl --retry 10 --retry-connrefused http://localhost:8000 | grep "Hello"
#      - run:
#          name: Save image to an archive
#          command: |
#            mkdir docker-image
#            docker save -o docker-image/image.tar $FULL_IMAGE_NAME
#      - persist_to_workspace:
#          root: .
#          paths:
#            - docker-image
#
#  deploy:
#    docker:
#      - image: circleci/python:3.7
#    environment:
#      AWS_DEFAULT_OUTPUT: json
#    steps:
#      - checkout
#      - setup_remote_docker
#      - attach_workspace:
#          at: workspace
#      - aws-cli/install
#      - aws-cli/configure:
#          aws-access-key-id: "$AWS_ACCESS_KEY_ID"
#          aws-region: "$AWS_DEFAULT_REGION"
#      - run:
#          name: Load image
#          command: |
#            docker load --input workspace/docker-image/image.tar
#      - run:
#          name: Setup common environment variables
#          command: |
#            echo 'export ECS_CLUSTER_NAME="${AWS_RESOURCE_NAME_PREFIX}-cluster"' >> $BASH_ENV
#            echo 'export ECS_SERVICE_NAME="${AWS_RESOURCE_NAME_PREFIX}-service"' >> $BASH_ENV
#            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:${CIRCLE_SHA1}"' >> $BASH_ENV
#      - run:
#          name: Push image
#          command: |
#            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
#            docker push $FULL_IMAGE_NAME
#      - aws-ecs/update-service:
#          family: "${ECS_SERVICE_NAME}"
#          cluster-name: "${ECS_CLUSTER_NAME}"
#          container-image-name-updates: "container=${ECS_SERVICE_NAME},image-and-tag=${FULL_IMAGE_NAME}"
#          container-env-var-updates: "container=${ECS_SERVICE_NAME},name=VERSION_INFO,value=${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM},container=${ECS_SERVICE_NAME},name=BUILD_DATE,value=\"$(date)\""
#          verify-revision-is-deployed: true
#      - run:
#          name: Test deployment (Please manually tear down AWS resources after use, if desired)
#          command: |
#            TARGET_GROUP_ARN=$(aws ecs describe-services --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME | jq -r '.services[0].loadBalancers[0].targetGroupArn')
#            ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
#            ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')
#            # Test multiple times to verify that the new revision has been deployed across the entire cluster
#            for attempt in {1..50}; do
#              curl -s --retry 10 http://$ELB_DNS_NAME | grep -E "Hello.*${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}"
#            done
#workflows:
#  build-deploy:
#    jobs:
#      - build
#      - deploy:
#          requires:
#            - build


version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@0.0.2
  aws-ecs: circleci/aws-ecs@0.0.8
jobs:
  build_test:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run:
          name: docker-compose build
          command: docker-compose build
      - run:
          name: docker-compose up
          command: docker-compose up -d
      - run:
          name: sleep for waiting launch db
          command: sleep 10
#      - run:
#          name: "before_test: migrate"
#          command: docker-compose run web python manage.py --settings=django_service.ci_settings migrate
#      - run:
#          name: test
#          command: docker-compose run web python manage.py test sample
      - run:
          name: docker-compose down
          command: docker-compose down

  build_image:
    docker:
      - image: docker:18.09.0
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: install aws cli
          command: |
            apk add --no-cache --update py-pip
            pip install awscli
      - run:
          name: build image
          command: |
            $(aws ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION})
            docker build -t ${ECR_DOMAIN}/django:$CIRCLE_SHA1 -t ${ECR_DOMAIN}/django:latest ./django_service
            docker build -t ${ECR_DOMAIN}/nginx:$CIRCLE_SHA1 -t ${ECR_DOMAIN}/nginx:latest ./nginx
      - run:
          name: Push Docker Image
          command: |
            docker push ${ECR_DOMAIN}/django:$CIRCLE_SHA1
            docker push ${ECR_DOMAIN}/django:latest
            docker push ${ECR_DOMAIN}/nginx:$CIRCLE_SHA1
            docker push ${ECR_DOMAIN}/nginx:latest

  deploy:
    docker:
      - image: circleci/python:3.7
    steps:
      - run:
          name: install aws cli
          command: |
            sudo pip install awscli
      - run:
          name: download jq
          command: |
            wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
            mv jq-linux64 jq
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECS_CLUSTER_NAME="${AWS_RESOURCE_NAME_PREFIX}-cluster"' >> $BASH_ENV
            echo 'export ECS_SERVICE_NAME="${AWS_RESOURCE_NAME_PREFIX}-service"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: login
          command: |
            $(aws ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION})
      - run:
          name: deploy
          command: |
            aws ecs describe-task-definition --task-definition django-service |
            jq '.taskDefinition | { containerDefinitions: .containerDefinitions }' > definition.json
            # aws ecs update-service --cluster django-cluster --service django-service --task-definition django-service
      - aws-ecs/deploy-service-update:
          aws-region: ${AWS_DEFAULT_REGION}
          family: "${AWS_RESOURCE_NAME_PREFIX}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX}-cluster"
          container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX}-service,tag=${CIRCLE_SHA1}"
      - run:
          name: migration
          command: |
            aws ecs run-task --cluster django-cluster --task-definition django-migrate


workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build_test
      - build_image:
          requires:
            - build_test
#      #          filters:
#      #            branches:
#      #              only:master
      - deploy:
          requires:
            - build_image